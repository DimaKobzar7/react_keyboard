{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressedKey","handleKeyup","event","code","setState","key","document","addEventListener","this","removeEventListener","className","Component","ReactDOM","render","getElementById"],"mappings":"2MAMaA,EAAb,4MACEC,MAAe,CACbC,WAAY,IAFhB,EAaEC,YAAc,SAACC,GACM,UAAfA,EAAMC,KACR,EAAKC,SAAS,CACZJ,WAAYE,EAAMC,OAGpB,EAAKC,SAAS,CACZJ,WAAYE,EAAMG,OApB1B,uDAKE,WACEC,SAASC,iBAAiB,QAASC,KAAKP,eAN5C,kCASE,WACEK,SAASG,oBAAoB,QAASD,KAAKP,eAV/C,oBAyBE,WACE,IAAQD,EAAeQ,KAAKT,MAApBC,WAER,OACE,qBAAKU,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACGV,EAAU,mCACqBA,EADrB,KAEP,kCAjCd,GAAyBW,a,MCDzBC,IAASC,OACP,cAAC,EAAD,IACAP,SAASQ,eAAe,W","file":"static/js/main.dd61d4ed.chunk.js","sourcesContent":["import { Component } from 'react';\n\ntype State = {\n  pressedKey : string,\n};\n\nexport class App extends Component<{}, State> {\n  state: State = {\n    pressedKey: '',\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyup);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyup);\n  }\n\n  handleKeyup = (event: KeyboardEvent) => {\n    if (event.code === 'Space') {\n      this.setState({\n        pressedKey: event.code,\n      });\n    } else {\n      this.setState({\n        pressedKey: event.key,\n      });\n    }\n  };\n\n  render() {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {pressedKey\n            ? `The last pressed key is [${pressedKey}]`\n            : 'Nothing was pressed yet'}\n        </p>\n      </div>\n    );\n  }\n}\n\n// // import React from 'react';\n// import { Component } from 'react';\n\n// type State = {\n//   pressed: boolean,\n//   keyBoardBtn : string,\n// };\n\n// В классовой компоненте даже если те не передаешь пропсы их надо указывать в дженерике как пустой обьект\n// поэтому надо пустой обект передавать\n// export class App extends Component<{}, State> {\n//   state: Readonly<State> = {\n//     pressed: false,\n//     keyBoardBtn: '',\n//   };\n\n//   componentDidMount() {\n//     document.addEventListener('keyup', (event: KeyboardEvent) => {\n//       // key показывает именно какая кнопка нажалась на клавиатуре\n//       // key єто свойство event\n//       // console.log(event.key);\n//       this.setState({ pressed: true, keyBoardBtn: event.key });\n//     });\n//   }\n\n// componentWillUnmount() {\n//   document.removeEventListener('keyup', (event: KeyboardEvent) => {\n//     // походку  keyBoardBtn: event.key тут не нужен или его в  keyBoardBtn: '' надо сбрасывать\n//     this.setState({ pressedKey: false, keyBoardBtn: event.key });\n//   });\n// }\n\n//   // надо отслеживать было ли нажатие вообще и при  методе отключения на фолз ставить\n//   // а ключ в сообщение выводить\n//   // надо сделать функцию на которую цеплять обработчик события\n//   // и в нем через сет стейт менять фолз на тру и через другой метод снимать обработчик\n//   render() {\n//     const { pressed, keyBoardBtn } = this.state;\n\n//     return (\n//       <div className=\"App\">\n//         {/* <p className=\"App__message\">The last pressed key is [Enter]</p> */}\n//         <p className=\"App__message\">\n//           {pressed === false\n//             ? 'Nothing was pressed yet'\n//             : `The last pressed key is [${keyBoardBtn}]`}\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}